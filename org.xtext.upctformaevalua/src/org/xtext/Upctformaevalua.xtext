// automatically generated by Xtext
grammar org.xtext.Upctformaevalua with org.eclipse.xtext.common.Terminals

import "platform:/resource/upctformaevalua/model/upctformaevalua.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Evaluation returns Evaluation:
	{Evaluation}
	'Evaluation'
	name=EString
	'{'
		('package' name = QualifiedName ';')?
		(units+=EvaluationUnit ( "," units+=EvaluationUnit)* )?
	'}';

QualifiedName: ID ('.' ID)* ;

EvaluationUnit returns EvaluationUnit:
	EvaluationUnit_Impl | Training | Final;

Question returns Question:
	Question_Impl |  SingleAnswer | MultipleAnswer | FillingAnswer | TrueOrFalse;

enum EvaluationLanguageType returns EvaluationLanguageType:
	ES = 'ES' | EN = 'EN' | FR = 'FR' | EL = 'EL' | LT = 'LT';	


enum UnitLicenses returns UnitLicenses:
				PRIVATE = 'PRIVATE' | BY = 'BY' | BYSA = 'BYSA' | BYND = 'BYND' | BYNC = 'BYNC' | BYNCSA = 'BYNCSA' | BYNCND = 'BYNCND';

enum EvaluationUnitType returns EvaluationUnitType:
				Interoperability = 'Interoperability' | Open = 'Open' | Preview = 'Preview';

EString returns ecore::EString:
	STRING | ID;

EvaluationUnit_Impl returns EvaluationUnit:
	{EvaluationUnit}
	'EvaluationUnit'
	name=EString	
	'{'
		('numberquestions' numberquestions=EInt)?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

Question_Impl returns Question:
	{Question}
	'Question'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

Training returns Training:
	{Training}
	'Training'
	name=EString
	language = EvaluationLanguageType
	'{'
		('numberquestions' numberquestions=EInt)?
		('Attempts' Attempts=EInt)?
		('grade' grade=TypeGrade)?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

Final returns Final:
	{Final}
	'Final'
	name=EString
	author=EString
	type=EvaluationUnitType
	language = EvaluationLanguageType
	license = UnitLicenses	
	email=EString
	institution=EString	
	theme=EString
	idunidad=EString	
	learninganalytics=EInt
	'{'
		('numberquestions' numberquestions=EInt)?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

SingleAnswer returns SingleAnswer:
	'SingleAnswer'
	'{'
		'statement' statements=Paragraph
		('answers' '{' answers+=Single ( "," answers+=Single)* '}' )?
		('correct' correctanswer=EInt)?
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
	'}';

MultipleAnswer returns MultipleAnswer:
	'MultipleAnswer'
	'{'
		'statement' statements=Paragraph
		('answers' '{' answers+=Multiple ( "," answers+=Multiple)* '}' )?
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
	'}';

FillingAnswer returns FillingAnswer:
	{FillingAnswer}
	'FillingAnswer'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		('holes' '{' holes+=Hole ( "," holes+=Hole)* '}' )?
	'}';

TrueOrFalse returns TrueOrFalse:
	{TrueOrFalse}
	'TrueOrFalse'
	'{'
		('assertions' '{' assertions+=Assertion ( "," assertions+=Assertion)* '}' )?
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?		
	'}';

Paragraph returns Paragraph:
	{Paragraph}
	(text=EString)?
	;

Single returns Single:
	{Single}
	(text=EString)?
	;

Multiple returns Multiple:
	{Multiple}
	'{'
		(text=EString ",")?
		(value=EBoolean )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Hole returns Hole:
	{Hole}
	'Hole'
	'{'
		('text' text=EString)?
		('type' type=TypeHole)?
	'}';

enum TypeHole returns TypeHole:
				visible = 'visible' | hole = 'hole';

Assertion returns Assertion:
	{Assertion}
	'{'
		(text=EString ",")?
		(value=EBoolean)?
	'}';

enum TypeGrade returns TypeGrade:
				highest = 'highest' | middle = 'middle' | lowest = 'lowest';
